syntax = "proto3";
package mission_control;

enum SystemMode {
    UNKNOWN = 0;
    MAJOR_MODE_STARTUP_DIAGNOSTICS = 100;
    MAJOR_MODE_HOME_Z1_Z2 = 200;
    MAJOR_MODE_MOVE_X_Y = 300;
    MAJOR_MODE_DRILL_BOREHOLE = 400;
    MAJOR_MODE_CASE_BOREHOLE = 500;
    MAJOR_MODE_INSERT_HEATER = 600;
    MAJOR_MODE_MINE_WATER = 700;
    MAJOR_MODE_DATA_DOWNLOAD = 800;
    MAJOR_MODE_TROUBLESHOOT = 900;

    RIG_STANDBY = 101;
    RIG_DRILL_POSITIONING_XY = 102; // user has requested to move the rig to drill at position XY
    RIG_WATER_POSITIONING_XY = 103; // user has requested to move the rig to extract water at position XY
    
    DRILL_STANDBY = 201; // ready to receive user input, could be stopped due to emergency stop

    // moves to the top and makes sure that the limit switch is hit, and other calibration can also be done
    DRILL_CALIBRATING = 202; 
    
    // user has asked to descend without turning on the drill with a given target position
    DRILL_DESCENDING_OFF = 203;

    // user has asked to descend with the drill on, drill is being controlled through a control loop
    DRILL_DESCENDING_DRILLING = 204;
    
    // drill is withdrawing with the drill motor off to a target position
    DRILL_ASCENDING_OFF = 205;

    // drill is withdrawing with the drill motor on to a target position
    DRILL_ASCENDING_ON = 206;

    // drill calibration had an error
    DRILL_CALIBRATION_ERROR = 250;
    
    HEATING = 12;
}

enum WaterProductionStates {
    WPSTATE_MANUAL = 0;
    WPSTATE_CLEANING = 1;
}

enum WaterProductionCleaningSeq {
    CLEANING_SEQ_1 = 0;
    CLEANING_SEQ_2 = 1;
    CLEANING_SEQ_3 = 2;
}

enum CommandReport {
    EXECUTED = 0;
    INVALID_STATE = 1;
    EXECUTION_ERROR = 2;
}

message HeartBeatRequest {
    uint64 request_timestamp = 1;
}

message HeartBeatReply {
    uint64 timestamp = 1;
    uint64 request_timestamp = 2;
    float main_suppy_V = 3;
    bool bus_24V_dc = 4;
    bool bus_75V_dc = 5;
    float cpu_temperature_degC = 6;
    SystemMode mode = 7;
    uint64 mission_time_ms = 8;
    bool zdrill_servo_moving = 9;
    bool zwater_servo_moving = 10;
    bool x_servo_moving = 11;
    bool y_servo_moving = 12;
    float drill_motor_setting = 13;
    bool pump_on = 14;
    bool heater_setting = 15;
    float total_current_mA = 16;

    float rig_x = 100;
    float rig_y = 101;
}

message RigStatusRequest {
    uint64 request_timestamp_ms = 1;
}

message RigStatusResponse {
    uint64 timestamp_ms = 1;
    uint64 request_timestamp_ms = 2;
    
    float x_position_m = 10;        // position with the left limit switch being position zero, and rightward is positive
    float x_velocity_m_s = 11;      // velocity in meter per second
    float y_position_m = 12;        // position with the front limit switch being position zero, and behind is negative
    float y_velocity_m_s = 13;      // velocity in meter per second
    
    bool last_calibration_success = 20; // whether the last calibration command was successful
}

message DrillAssemblyStatusRequest {
    uint64 request_timestamp_ms = 1;
}

message DrillAssemblyStatusResponse {
    uint64 timestamp_ms = 1;
    uint64 request_timestamp_ms = 2;
    float drill_setting = 3;     // 0.0 == off, 0.5 == half waveform from the triac, 1.0 // fully on
    float tachometer_RPM = 4;    // current reading from the tachometer
    float drill_e_power_W   = 5;   // real electric power readimng from drill power meter
    float drill_e_current_A = 6;   // total electric current (real + imaginary)
    float z_position_m = 7;        // position with the top limit switch being position zero, and downward is negative
    float z_velocity_m_s = 8;      // velocity in meter per second
    float cpu_temperature_degC = 9;     // Raspberry Pi or any other control computer temperature
    bool last_calibration_success = 20; // whether the last calibration command was successful
    bool calibration_error_state = 21;  // are we in calibration error state? if yes, the valid commands are limited
}

message LimitChangeRequest {
    uint64 request_timestamp = 1;
    float value = 2;
}

message GetLimitRequest {
    uint64 request_timestamp = 1;
}

message LimitResponse {
    uint64 request_timestamp = 1;
    float value = 2;
}

message RigMoveCommandRequest {
    uint64 request_timestamp = 1;
    float x = 2;
    float y = 3;
}

message DrillModeRequest {
    uint64 request_timestamp = 1;
    bool drill_mode = 2;
}

message DrillCalibrationRequest {
    uint64 request_timestamp = 1;
}

message DrillDescendingOffRequest {
    uint64 request_timestamp = 1;
    float target_z_m = 2; // example -1.3 [m] (negative as we are using top as zero, negative downward direction)
}

message DrillDescendingDrillingRequest {
    uint64 request_timestamp = 1;
    float target_z_m = 2; // example -1.3 [m] (negative as we are using top as zero, negative downward direction)
}

message CommandResponse {
    uint64 timestamp = 1;
    uint64 request_timestamp = 2;
    CommandReport status = 3;
}

message EmergencyStopRequest {
    uint64 request_timestamp = 1;
}

message SetModeRequest {
    uint64 request_timestamp = 1;
}

message StartCommandRequest {
    uint64 request_timestamp = 1;
}

message GetMajorModesRequest {
    uint64 request_timestamp = 1;
}

message MajorModesList {
    uint64 timestamp = 1;
    uint64 request_timestamp = 2;
    repeated int32 modes = 3;
    repeated string mode_labels = 4;
}

message HoleListRequest {
    uint64 request_timestamp = 1;
}

message HoleList {
    uint64 timestamp = 1;
    uint64 request_timestamp = 2;
    repeated int32 order = 3;
    repeated float x_m = 4;
    repeated float y_m = 5;
    repeated float max_z_m = 6;
    repeated float water_ml = 7;
    repeated float diameter_m = 8;
}

service MissionControl {
    rpc GetMajorModes (GetMajorModesRequest) returns (MajorModesList);
    rpc HeartBeat (HeartBeatRequest) returns (HeartBeatReply);
    rpc GetHoles (HoleListRequest) returns (HoleList);
    rpc SetMode (SetModeRequest) returns (CommandResponse);
    rpc StartMissionClock (StartCommandRequest) returns (CommandResponse);
    rpc StartHomeZ1 (StartCommandRequest) returns (CommandResponse);
    rpc StartHomeZ2 (StartCommandRequest) returns (CommandResponse);
    rpc StartHomeX (StartCommandRequest) returns (CommandResponse);
    rpc StartHomeY (StartCommandRequest) returns (CommandResponse);
    rpc StartSpinDrillMotor (StartCommandRequest) returns (CommandResponse);
    rpc StopSpinDrillMotor (StartCommandRequest) returns (CommandResponse);
    rpc StartSpinPump (StartCommandRequest) returns (CommandResponse);
    rpc StopSpinPump (StartCommandRequest) returns (CommandResponse);
    rpc StartHeater (StartCommandRequest) returns (CommandResponse);
    rpc StopHeater (StartCommandRequest) returns (CommandResponse);
    
    rpc RigMove (RigMoveCommandRequest) returns (CommandResponse);
    rpc DrillMode (DrillModeRequest) returns (CommandResponse);
    rpc DrillCalibration (DrillCalibrationRequest) returns (CommandResponse);
    rpc DrillDescendingOff (DrillDescendingOffRequest) returns (CommandResponse);
    rpc DrillDescendingDrilling (DrillDescendingDrillingRequest) returns (CommandResponse);
    
    rpc EmergencyStop (EmergencyStopRequest) returns (CommandResponse);

    rpc DrillAssemblyStatus (DrillAssemblyStatusRequest) returns (DrillAssemblyStatusResponse);

    rpc SetAirGap (LimitChangeRequest) returns (CommandResponse);
    rpc GetAirGap (GetLimitRequest) returns (LimitResponse);
    rpc SetMaxZ1Travel (LimitChangeRequest) returns (CommandResponse);
    rpc GetMaxZ1Travel (GetLimitRequest) returns (LimitResponse);
    rpc SetLowerCurrentLimit (LimitChangeRequest) returns (CommandResponse);
    rpc GetLowerCurrentLimit (GetLimitRequest) returns (LimitResponse);
    rpc SetUpperCurrentLimit (LimitChangeRequest) returns (CommandResponse);
    rpc GetUpperCurrentLimit (GetLimitRequest) returns (LimitResponse);
    rpc SetLowerWOBLimit (LimitChangeRequest) returns (CommandResponse);
    rpc GetLowerWOBLimit (GetLimitRequest) returns (LimitResponse);
    rpc SetUpperWOBLimit (LimitChangeRequest) returns (CommandResponse);
    rpc GetUpperWOBLimit (GetLimitRequest) returns (LimitResponse);
    rpc SetLowerRPMLimit (LimitChangeRequest) returns (CommandResponse);
    rpc GetLowerRPMLimit (GetLimitRequest) returns (LimitResponse);
    rpc SetUpperRPMLimit (LimitChangeRequest) returns (CommandResponse);
    rpc GetUpperRPMLimit (GetLimitRequest) returns (LimitResponse);
    rpc SetZ1ServoTorqueLimit (LimitChangeRequest) returns (CommandResponse);
    rpc GetZ1ServoTorqueLimit (GetLimitRequest) returns (LimitResponse);
    rpc SetZ2ServoTorqueLimit (LimitChangeRequest) returns (CommandResponse);
    rpc GetZ2ServoTorqueLimit (GetLimitRequest) returns (LimitResponse);
    rpc SetXServoTorqueLimit (LimitChangeRequest) returns (CommandResponse);
    rpc GetXServoTorqueLimit (GetLimitRequest) returns (LimitResponse);
    rpc SetYServoTorqueLimit (LimitChangeRequest) returns (CommandResponse);
    rpc GetYServoTorqueLimit (GetLimitRequest) returns (LimitResponse);
}

service DrillControl {
    rpc HeartBeat (HeartBeatRequest) returns (HeartBeatReply);
    rpc DrillAssemblyStatus (DrillAssemblyStatusRequest) returns (DrillAssemblyStatusResponse);
    rpc DrillMode (DrillModeRequest) returns (CommandResponse);
    rpc EmergencyStop (EmergencyStopRequest) returns (CommandResponse);
    rpc DrillCalibration (DrillCalibrationRequest) returns (CommandResponse);
}