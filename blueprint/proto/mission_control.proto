syntax = "proto3";
package mission_control;

enum SystemMode {
    UNKNOWN = 0;
    READY = 1;
    CALIBRATING = 2;
    MANUAL = 3;

    RIG_STANDBY = 101;
    RIG_DRILL_POSITIONING_XY = 102; // user has requested to move the rig to drill at position XY
    RIG_WATER_POSITIONING_XY = 103; // user has requested to move the rig to extract water at position XY
    
    DRILL_STANDBY = 201; // ready to receive user input, could be stopped due to emergency stop

    // moves to the top and makes sure that the limit switch is hit, and other calibration can also be done
    DRILL_CALIBRATING = 202; 
    
    // user has asked to descend without turning on the drill with a given target position
    DRILL_DESCENDING_OFF = 203;

    // user has asked to descend with the drill on, drill is being controlled through a control loop
    DRILL_DESCENDING_DRILLING = 204;
    
    // drill is withdrawing with the drill motor off to a target position
    DRILL_ASCENDING_OFF = 205;

    // drill is withdrawing with the drill motor on to a target position
    DRILL_ASCENDING_ON = 206;
    
    HEATING = 12;
}

enum CommandReport {
    EXECUTED = 0;
    INVALID_STATE = 1;
    EXECUTION_ERROR = 2;
}

message HeartBeatRequest {
    uint64 request_timestamp = 1;
}

message HeartBeatReply {
    uint64 timestamp = 1;
    uint64 request_timestamp = 2;
    bool drill_subsystem_online = 3;
    bool heater_sussystem_online = 4;
    bool fan_on  = 5;
    float cpu_temperature_degC = 6;
    SystemMode mode = 7;
}

message DrillSensorsStatusRequest {
    uint64 request_timestamp = 1;
}

message DrillSensorsStatusResponse {
    uint64 timestamp = 1;
    uint64 request_timestamp = 2;
    bool drill_on = 3;
    float tachometer = 4;
}

message DrillCommandRequest {
    uint64 request_timestamp = 1;
    bool drill_on = 2;
}

message DrillCommandResponse {
    uint64 timestamp = 1;
    uint64 request_timestamp = 2;
    CommandReport status = 3;
}

message FanCommandRequest {
    uint64 request_timestamp = 1;
    bool fan_on = 2;
}

message FanCommandResponse {
    uint64 timestamp = 1;
    uint64 request_timestamp = 2;
    CommandReport status = 3;
}

service MissionControl {
    rpc HeartBeat (HeartBeatRequest) returns (HeartBeatReply);
    rpc DrillSensorStatus (DrillSensorsStatusRequest) returns (DrillSensorsStatusResponse);
    rpc DrillCommand (DrillCommandRequest) returns (DrillCommandResponse);
    rpc FanCommand (FanCommandRequest) returns (FanCommandResponse);
}

service DrillControl {
    rpc HeartBeat (HeartBeatRequest) returns (HeartBeatReply);
    rpc DrillSensorStatus (DrillSensorsStatusRequest) returns (DrillSensorsStatusResponse);
    rpc DrillCommand (DrillCommandRequest) returns (DrillCommandResponse);
}