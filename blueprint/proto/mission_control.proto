syntax = "proto3";
package mission_control;

enum SystemMode {
    UNKNOWN = 0;
    MAJOR_MODE_STARTUP_DIAGNOSTICS = 100;
    // MAJOR_MODE_HOME_Z1_Z2 = 200;
    // MAJOR_MODE_MOVE_X_Y = 300;
    MAJOR_MODE_DRILL_BOREHOLE = 400;
    // MAJOR_MODE_CASE_BOREHOLE = 500;
    // MAJOR_MODE_INSERT_HEATER = 600;
    // MAJOR_MODE_MINE_WATER = 700;
    // MAJOR_MODE_DATA_DOWNLOAD = 800;
    // MAJOR_MODE_TROUBLESHOOT = 900;

    // refer to "State Diagram for 2021-Jul-06" PDF in Hydration Google Drive for state diagram
    STARTUP_IDLE = 101; //ready to receive user input for startups and diagnostics, if emergency stop button is pressed at any point system will return to this state
    STARTUP_MISSION_CLOCK_STARTED = 102; //after pressing "Start Mission Clock Button", clock has completed starting
    STARTUP_HOMING_Z1 = 103; //after pressing "Home Z1" button, begin homing z1 axis
    STARTUP_HOME_Z1_COMPLETED = 104; //z1 has completed homing
    STARTUP_HOMING_Z2 = 105; //after pressing "Home Z1" button, begin homing z1 axis
    STARTUP_HOME_Z2_COMPLETED = 106; //z1 has completed homing
    STARTUP_HOMING_Y = 107; //after pressing "Home Y" button, Y axis begins homing
    STARTUP_HOME_Y_COMPLETED = 108; //y axis has completd homing

    // refer to "State Diagram for 2021-Jul-06" PDF in Hydration Google Drive for state diagram
    DRILL_IDLE = 401; // ready to receive user input, could be stopped due to emergency stop
    DRILL_MOVING_Y = 402; //after pressing "Move" button, will move y axis to appropriate location
    DRILLING_HOLE_IDLE = 404; //after pressing "Start Drill" button, drill is ready to receive user input for next action
    DRILLING_HOLE_DRILLING_DOWN = 405; //From DRILLING_HOLE_IDLE, user can drill down with the "Drill Down" button
    DRILLING_HOLE_REAMING_UP = 406; //From DRILLING_HOLE_IDLE, user can ream up with the "Reaming Up" button
    DRILLING_HOLE_HOMING_Z1 = 407; //After pressing "Finish Drill" button, return to homing the Z1 axis
    HEATER_HOLE_MOVING_TO_Z2 = 408; // Move to position Z2 after finishing drilling Z1
    HEATER_LOWERING_DOWN = 409; // Lower header
    HEATER_READY_TO_HEAT = 410; //
    HEATER_MELTING = 411;
    HEATER_HOMING_Z2 = 412;
}

enum CommandReport {
    EXECUTED = 0;
    INVALID_STATE = 1;
    EXECUTION_ERROR = 2;
}

message HeartBeatRequest {
    uint64 request_timestamp = 1;
}

message HeartBeatReply {
    uint64 timestamp = 1;
    uint64 request_timestamp = 2;
    // float main_suppy_V = 3;
    // bool bus_24V_dc = 4;
    //bool bus_75V_dc = 5;
    uint32 number_of_servos_detected = 1001;
    float cpu_temperature_degC = 6;
    SystemMode state = 71;
    SystemMode major_mode = 70;
    uint64 mission_time_ms = 8;
    bool zdrill_servo_moving = 9;
    //bool zwater_servo_moving = 10;
    //bool x_servo_moving = 11;
    bool y_servo_moving = 12;
    //float drill_motor_setting = 13;
    //bool pump_on = 14;
    //bool heater_setting = 15;
    //float total_current_mA = 16;

    //float rig_x = 100;
    float rig_y = 101;
    float rig_zdrill = 102;
    //float rig_zwater = 103;

    //float rig_torque_z1 = 120;
    string server_version = 50;
    repeated Hole holes = 51;
}


message Limits {
    uint64 request_timestamp = 1;
    float air_gap = 2;
    float max_z1 = 3;
    float ice_depth = 4;
}

message GetLimitRequest {
    uint64 request_timestamp = 1;
}

message MoveRequest {
    uint64 request_timestamp = 1;
    float delta = 2;
    float vel = 3; 
}

message CommandResponse {
    uint64 timestamp = 1;
    uint64 request_timestamp = 2;
    CommandReport status = 3;
}

message EmergencyStopRequest {
    uint64 request_timestamp = 1;
}

message StartCommandRequest {
    uint64 request_timestamp = 1;
}

message GetMajorModesRequest {
    uint64 request_timestamp = 1;
}

message MajorModesList {
    uint64 timestamp = 1;
    uint64 request_timestamp = 2;
    repeated int32 modes = 3;
    repeated string mode_labels = 4;
}

message Hole {
    int32 order = 3;
    float x_m = 4;
    float y_m = 5;
    float max_z_m = 6;
    float water_ml = 7;
    float diameter_m = 8;
}

message GotoMajorModesRequest {
    uint64 request_timestamp = 1;
    SystemMode new_mode = 2;
}

service MissionControl {
    rpc GetMajorModes (GetMajorModesRequest) returns (MajorModesList);
    rpc HeartBeat (HeartBeatRequest) returns (HeartBeatReply);
    
    rpc GetLimits (GetLimitRequest) returns (Limits);
    rpc SetLimits (Limits) returns (CommandResponse);
    
    rpc StartupNext (StartCommandRequest) returns (CommandResponse);

    rpc SetHomeZ1 (StartCommandRequest) returns (CommandResponse);
    rpc SetHomeY (StartCommandRequest) returns (CommandResponse);

    rpc Z1Move (MoveRequest) returns (CommandResponse);
    rpc YMove (MoveRequest) returns (CommandResponse);

    rpc StartDrillHole (StartCommandRequest) returns (CommandResponse);
    rpc EndDrillHole (StartCommandRequest) returns (CommandResponse);
    
    rpc GotoMajorMode (GotoMajorModesRequest) returns (CommandResponse);
    rpc EmergencyStop (EmergencyStopRequest) returns (CommandResponse);
}

