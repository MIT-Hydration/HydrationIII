# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import mission_control_pb2 as mission__control__pb2


class MissionControlStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetMajorModes = channel.unary_unary(
                '/mission_control.MissionControl/GetMajorModes',
                request_serializer=mission__control__pb2.GetMajorModesRequest.SerializeToString,
                response_deserializer=mission__control__pb2.MajorModesList.FromString,
                )
        self.HeartBeat = channel.unary_unary(
                '/mission_control.MissionControl/HeartBeat',
                request_serializer=mission__control__pb2.HeartBeatRequest.SerializeToString,
                response_deserializer=mission__control__pb2.HeartBeatReply.FromString,
                )
        self.GetHoles = channel.unary_unary(
                '/mission_control.MissionControl/GetHoles',
                request_serializer=mission__control__pb2.HoleListRequest.SerializeToString,
                response_deserializer=mission__control__pb2.HoleList.FromString,
                )
        self.SetMode = channel.unary_unary(
                '/mission_control.MissionControl/SetMode',
                request_serializer=mission__control__pb2.SetModeRequest.SerializeToString,
                response_deserializer=mission__control__pb2.CommandResponse.FromString,
                )
        self.StartMissionClock = channel.unary_unary(
                '/mission_control.MissionControl/StartMissionClock',
                request_serializer=mission__control__pb2.StartCommandRequest.SerializeToString,
                response_deserializer=mission__control__pb2.CommandResponse.FromString,
                )
        self.StartHomeZ1 = channel.unary_unary(
                '/mission_control.MissionControl/StartHomeZ1',
                request_serializer=mission__control__pb2.StartCommandRequest.SerializeToString,
                response_deserializer=mission__control__pb2.CommandResponse.FromString,
                )
        self.StartHomeZ2 = channel.unary_unary(
                '/mission_control.MissionControl/StartHomeZ2',
                request_serializer=mission__control__pb2.StartCommandRequest.SerializeToString,
                response_deserializer=mission__control__pb2.CommandResponse.FromString,
                )
        self.StartHomeX = channel.unary_unary(
                '/mission_control.MissionControl/StartHomeX',
                request_serializer=mission__control__pb2.StartCommandRequest.SerializeToString,
                response_deserializer=mission__control__pb2.CommandResponse.FromString,
                )
        self.StartHomeY = channel.unary_unary(
                '/mission_control.MissionControl/StartHomeY',
                request_serializer=mission__control__pb2.StartCommandRequest.SerializeToString,
                response_deserializer=mission__control__pb2.CommandResponse.FromString,
                )
        self.SetHomeZ1 = channel.unary_unary(
                '/mission_control.MissionControl/SetHomeZ1',
                request_serializer=mission__control__pb2.StartCommandRequest.SerializeToString,
                response_deserializer=mission__control__pb2.CommandResponse.FromString,
                )
        self.SetHomeZ2 = channel.unary_unary(
                '/mission_control.MissionControl/SetHomeZ2',
                request_serializer=mission__control__pb2.StartCommandRequest.SerializeToString,
                response_deserializer=mission__control__pb2.CommandResponse.FromString,
                )
        self.SetHomeX = channel.unary_unary(
                '/mission_control.MissionControl/SetHomeX',
                request_serializer=mission__control__pb2.StartCommandRequest.SerializeToString,
                response_deserializer=mission__control__pb2.CommandResponse.FromString,
                )
        self.SetHomeY = channel.unary_unary(
                '/mission_control.MissionControl/SetHomeY',
                request_serializer=mission__control__pb2.StartCommandRequest.SerializeToString,
                response_deserializer=mission__control__pb2.CommandResponse.FromString,
                )
        self.StartSpinDrillMotor = channel.unary_unary(
                '/mission_control.MissionControl/StartSpinDrillMotor',
                request_serializer=mission__control__pb2.StartCommandRequest.SerializeToString,
                response_deserializer=mission__control__pb2.CommandResponse.FromString,
                )
        self.StopSpinDrillMotor = channel.unary_unary(
                '/mission_control.MissionControl/StopSpinDrillMotor',
                request_serializer=mission__control__pb2.StartCommandRequest.SerializeToString,
                response_deserializer=mission__control__pb2.CommandResponse.FromString,
                )
        self.StartSpinPump = channel.unary_unary(
                '/mission_control.MissionControl/StartSpinPump',
                request_serializer=mission__control__pb2.StartCommandRequest.SerializeToString,
                response_deserializer=mission__control__pb2.CommandResponse.FromString,
                )
        self.StopSpinPump = channel.unary_unary(
                '/mission_control.MissionControl/StopSpinPump',
                request_serializer=mission__control__pb2.StartCommandRequest.SerializeToString,
                response_deserializer=mission__control__pb2.CommandResponse.FromString,
                )
        self.StartHeater = channel.unary_unary(
                '/mission_control.MissionControl/StartHeater',
                request_serializer=mission__control__pb2.StartCommandRequest.SerializeToString,
                response_deserializer=mission__control__pb2.CommandResponse.FromString,
                )
        self.StopHeater = channel.unary_unary(
                '/mission_control.MissionControl/StopHeater',
                request_serializer=mission__control__pb2.StartCommandRequest.SerializeToString,
                response_deserializer=mission__control__pb2.CommandResponse.FromString,
                )
        self.RigMove = channel.unary_unary(
                '/mission_control.MissionControl/RigMove',
                request_serializer=mission__control__pb2.RigMoveCommandRequest.SerializeToString,
                response_deserializer=mission__control__pb2.CommandResponse.FromString,
                )
        self.Z1Move = channel.unary_unary(
                '/mission_control.MissionControl/Z1Move',
                request_serializer=mission__control__pb2.ZMoveRequest.SerializeToString,
                response_deserializer=mission__control__pb2.CommandResponse.FromString,
                )
        self.Z2Move = channel.unary_unary(
                '/mission_control.MissionControl/Z2Move',
                request_serializer=mission__control__pb2.ZMoveRequest.SerializeToString,
                response_deserializer=mission__control__pb2.CommandResponse.FromString,
                )
        self.DrillMode = channel.unary_unary(
                '/mission_control.MissionControl/DrillMode',
                request_serializer=mission__control__pb2.DrillModeRequest.SerializeToString,
                response_deserializer=mission__control__pb2.CommandResponse.FromString,
                )
        self.DrillCalibration = channel.unary_unary(
                '/mission_control.MissionControl/DrillCalibration',
                request_serializer=mission__control__pb2.DrillCalibrationRequest.SerializeToString,
                response_deserializer=mission__control__pb2.CommandResponse.FromString,
                )
        self.DrillDescendingOff = channel.unary_unary(
                '/mission_control.MissionControl/DrillDescendingOff',
                request_serializer=mission__control__pb2.DrillDescendingOffRequest.SerializeToString,
                response_deserializer=mission__control__pb2.CommandResponse.FromString,
                )
        self.DrillDescendingDrilling = channel.unary_unary(
                '/mission_control.MissionControl/DrillDescendingDrilling',
                request_serializer=mission__control__pb2.DrillDescendingDrillingRequest.SerializeToString,
                response_deserializer=mission__control__pb2.CommandResponse.FromString,
                )
        self.EmergencyStop = channel.unary_unary(
                '/mission_control.MissionControl/EmergencyStop',
                request_serializer=mission__control__pb2.EmergencyStopRequest.SerializeToString,
                response_deserializer=mission__control__pb2.CommandResponse.FromString,
                )
        self.DrillAssemblyStatus = channel.unary_unary(
                '/mission_control.MissionControl/DrillAssemblyStatus',
                request_serializer=mission__control__pb2.DrillAssemblyStatusRequest.SerializeToString,
                response_deserializer=mission__control__pb2.DrillAssemblyStatusResponse.FromString,
                )
        self.SetAirGap = channel.unary_unary(
                '/mission_control.MissionControl/SetAirGap',
                request_serializer=mission__control__pb2.LimitChangeRequest.SerializeToString,
                response_deserializer=mission__control__pb2.CommandResponse.FromString,
                )
        self.GetAirGap = channel.unary_unary(
                '/mission_control.MissionControl/GetAirGap',
                request_serializer=mission__control__pb2.GetLimitRequest.SerializeToString,
                response_deserializer=mission__control__pb2.LimitResponse.FromString,
                )
        self.SetMaxZ1Travel = channel.unary_unary(
                '/mission_control.MissionControl/SetMaxZ1Travel',
                request_serializer=mission__control__pb2.LimitChangeRequest.SerializeToString,
                response_deserializer=mission__control__pb2.CommandResponse.FromString,
                )
        self.GetMaxZ1Travel = channel.unary_unary(
                '/mission_control.MissionControl/GetMaxZ1Travel',
                request_serializer=mission__control__pb2.GetLimitRequest.SerializeToString,
                response_deserializer=mission__control__pb2.LimitResponse.FromString,
                )
        self.SetLowerCurrentLimit = channel.unary_unary(
                '/mission_control.MissionControl/SetLowerCurrentLimit',
                request_serializer=mission__control__pb2.LimitChangeRequest.SerializeToString,
                response_deserializer=mission__control__pb2.CommandResponse.FromString,
                )
        self.GetLowerCurrentLimit = channel.unary_unary(
                '/mission_control.MissionControl/GetLowerCurrentLimit',
                request_serializer=mission__control__pb2.GetLimitRequest.SerializeToString,
                response_deserializer=mission__control__pb2.LimitResponse.FromString,
                )
        self.SetUpperCurrentLimit = channel.unary_unary(
                '/mission_control.MissionControl/SetUpperCurrentLimit',
                request_serializer=mission__control__pb2.LimitChangeRequest.SerializeToString,
                response_deserializer=mission__control__pb2.CommandResponse.FromString,
                )
        self.GetUpperCurrentLimit = channel.unary_unary(
                '/mission_control.MissionControl/GetUpperCurrentLimit',
                request_serializer=mission__control__pb2.GetLimitRequest.SerializeToString,
                response_deserializer=mission__control__pb2.LimitResponse.FromString,
                )
        self.SetLowerWOBLimit = channel.unary_unary(
                '/mission_control.MissionControl/SetLowerWOBLimit',
                request_serializer=mission__control__pb2.LimitChangeRequest.SerializeToString,
                response_deserializer=mission__control__pb2.CommandResponse.FromString,
                )
        self.GetLowerWOBLimit = channel.unary_unary(
                '/mission_control.MissionControl/GetLowerWOBLimit',
                request_serializer=mission__control__pb2.GetLimitRequest.SerializeToString,
                response_deserializer=mission__control__pb2.LimitResponse.FromString,
                )
        self.SetUpperWOBLimit = channel.unary_unary(
                '/mission_control.MissionControl/SetUpperWOBLimit',
                request_serializer=mission__control__pb2.LimitChangeRequest.SerializeToString,
                response_deserializer=mission__control__pb2.CommandResponse.FromString,
                )
        self.GetUpperWOBLimit = channel.unary_unary(
                '/mission_control.MissionControl/GetUpperWOBLimit',
                request_serializer=mission__control__pb2.GetLimitRequest.SerializeToString,
                response_deserializer=mission__control__pb2.LimitResponse.FromString,
                )
        self.SetLowerRPMLimit = channel.unary_unary(
                '/mission_control.MissionControl/SetLowerRPMLimit',
                request_serializer=mission__control__pb2.LimitChangeRequest.SerializeToString,
                response_deserializer=mission__control__pb2.CommandResponse.FromString,
                )
        self.GetLowerRPMLimit = channel.unary_unary(
                '/mission_control.MissionControl/GetLowerRPMLimit',
                request_serializer=mission__control__pb2.GetLimitRequest.SerializeToString,
                response_deserializer=mission__control__pb2.LimitResponse.FromString,
                )
        self.SetUpperRPMLimit = channel.unary_unary(
                '/mission_control.MissionControl/SetUpperRPMLimit',
                request_serializer=mission__control__pb2.LimitChangeRequest.SerializeToString,
                response_deserializer=mission__control__pb2.CommandResponse.FromString,
                )
        self.GetUpperRPMLimit = channel.unary_unary(
                '/mission_control.MissionControl/GetUpperRPMLimit',
                request_serializer=mission__control__pb2.GetLimitRequest.SerializeToString,
                response_deserializer=mission__control__pb2.LimitResponse.FromString,
                )
        self.SetZ1ServoTorqueLimit = channel.unary_unary(
                '/mission_control.MissionControl/SetZ1ServoTorqueLimit',
                request_serializer=mission__control__pb2.LimitChangeRequest.SerializeToString,
                response_deserializer=mission__control__pb2.CommandResponse.FromString,
                )
        self.GetZ1ServoTorqueLimit = channel.unary_unary(
                '/mission_control.MissionControl/GetZ1ServoTorqueLimit',
                request_serializer=mission__control__pb2.GetLimitRequest.SerializeToString,
                response_deserializer=mission__control__pb2.LimitResponse.FromString,
                )
        self.SetZ2ServoTorqueLimit = channel.unary_unary(
                '/mission_control.MissionControl/SetZ2ServoTorqueLimit',
                request_serializer=mission__control__pb2.LimitChangeRequest.SerializeToString,
                response_deserializer=mission__control__pb2.CommandResponse.FromString,
                )
        self.GetZ2ServoTorqueLimit = channel.unary_unary(
                '/mission_control.MissionControl/GetZ2ServoTorqueLimit',
                request_serializer=mission__control__pb2.GetLimitRequest.SerializeToString,
                response_deserializer=mission__control__pb2.LimitResponse.FromString,
                )
        self.SetXServoTorqueLimit = channel.unary_unary(
                '/mission_control.MissionControl/SetXServoTorqueLimit',
                request_serializer=mission__control__pb2.LimitChangeRequest.SerializeToString,
                response_deserializer=mission__control__pb2.CommandResponse.FromString,
                )
        self.GetXServoTorqueLimit = channel.unary_unary(
                '/mission_control.MissionControl/GetXServoTorqueLimit',
                request_serializer=mission__control__pb2.GetLimitRequest.SerializeToString,
                response_deserializer=mission__control__pb2.LimitResponse.FromString,
                )
        self.SetYServoTorqueLimit = channel.unary_unary(
                '/mission_control.MissionControl/SetYServoTorqueLimit',
                request_serializer=mission__control__pb2.LimitChangeRequest.SerializeToString,
                response_deserializer=mission__control__pb2.CommandResponse.FromString,
                )
        self.GetYServoTorqueLimit = channel.unary_unary(
                '/mission_control.MissionControl/GetYServoTorqueLimit',
                request_serializer=mission__control__pb2.GetLimitRequest.SerializeToString,
                response_deserializer=mission__control__pb2.LimitResponse.FromString,
                )


class MissionControlServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetMajorModes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HeartBeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHoles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetMode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartMissionClock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartHomeZ1(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartHomeZ2(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartHomeX(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartHomeY(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetHomeZ1(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetHomeZ2(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetHomeX(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetHomeY(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartSpinDrillMotor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopSpinDrillMotor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartSpinPump(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopSpinPump(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartHeater(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopHeater(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RigMove(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Z1Move(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Z2Move(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DrillMode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DrillCalibration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DrillDescendingOff(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DrillDescendingDrilling(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EmergencyStop(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DrillAssemblyStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetAirGap(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAirGap(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetMaxZ1Travel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMaxZ1Travel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetLowerCurrentLimit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLowerCurrentLimit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetUpperCurrentLimit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUpperCurrentLimit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetLowerWOBLimit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLowerWOBLimit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetUpperWOBLimit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUpperWOBLimit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetLowerRPMLimit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLowerRPMLimit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetUpperRPMLimit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUpperRPMLimit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetZ1ServoTorqueLimit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetZ1ServoTorqueLimit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetZ2ServoTorqueLimit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetZ2ServoTorqueLimit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetXServoTorqueLimit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetXServoTorqueLimit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetYServoTorqueLimit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetYServoTorqueLimit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MissionControlServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetMajorModes': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMajorModes,
                    request_deserializer=mission__control__pb2.GetMajorModesRequest.FromString,
                    response_serializer=mission__control__pb2.MajorModesList.SerializeToString,
            ),
            'HeartBeat': grpc.unary_unary_rpc_method_handler(
                    servicer.HeartBeat,
                    request_deserializer=mission__control__pb2.HeartBeatRequest.FromString,
                    response_serializer=mission__control__pb2.HeartBeatReply.SerializeToString,
            ),
            'GetHoles': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHoles,
                    request_deserializer=mission__control__pb2.HoleListRequest.FromString,
                    response_serializer=mission__control__pb2.HoleList.SerializeToString,
            ),
            'SetMode': grpc.unary_unary_rpc_method_handler(
                    servicer.SetMode,
                    request_deserializer=mission__control__pb2.SetModeRequest.FromString,
                    response_serializer=mission__control__pb2.CommandResponse.SerializeToString,
            ),
            'StartMissionClock': grpc.unary_unary_rpc_method_handler(
                    servicer.StartMissionClock,
                    request_deserializer=mission__control__pb2.StartCommandRequest.FromString,
                    response_serializer=mission__control__pb2.CommandResponse.SerializeToString,
            ),
            'StartHomeZ1': grpc.unary_unary_rpc_method_handler(
                    servicer.StartHomeZ1,
                    request_deserializer=mission__control__pb2.StartCommandRequest.FromString,
                    response_serializer=mission__control__pb2.CommandResponse.SerializeToString,
            ),
            'StartHomeZ2': grpc.unary_unary_rpc_method_handler(
                    servicer.StartHomeZ2,
                    request_deserializer=mission__control__pb2.StartCommandRequest.FromString,
                    response_serializer=mission__control__pb2.CommandResponse.SerializeToString,
            ),
            'StartHomeX': grpc.unary_unary_rpc_method_handler(
                    servicer.StartHomeX,
                    request_deserializer=mission__control__pb2.StartCommandRequest.FromString,
                    response_serializer=mission__control__pb2.CommandResponse.SerializeToString,
            ),
            'StartHomeY': grpc.unary_unary_rpc_method_handler(
                    servicer.StartHomeY,
                    request_deserializer=mission__control__pb2.StartCommandRequest.FromString,
                    response_serializer=mission__control__pb2.CommandResponse.SerializeToString,
            ),
            'SetHomeZ1': grpc.unary_unary_rpc_method_handler(
                    servicer.SetHomeZ1,
                    request_deserializer=mission__control__pb2.StartCommandRequest.FromString,
                    response_serializer=mission__control__pb2.CommandResponse.SerializeToString,
            ),
            'SetHomeZ2': grpc.unary_unary_rpc_method_handler(
                    servicer.SetHomeZ2,
                    request_deserializer=mission__control__pb2.StartCommandRequest.FromString,
                    response_serializer=mission__control__pb2.CommandResponse.SerializeToString,
            ),
            'SetHomeX': grpc.unary_unary_rpc_method_handler(
                    servicer.SetHomeX,
                    request_deserializer=mission__control__pb2.StartCommandRequest.FromString,
                    response_serializer=mission__control__pb2.CommandResponse.SerializeToString,
            ),
            'SetHomeY': grpc.unary_unary_rpc_method_handler(
                    servicer.SetHomeY,
                    request_deserializer=mission__control__pb2.StartCommandRequest.FromString,
                    response_serializer=mission__control__pb2.CommandResponse.SerializeToString,
            ),
            'StartSpinDrillMotor': grpc.unary_unary_rpc_method_handler(
                    servicer.StartSpinDrillMotor,
                    request_deserializer=mission__control__pb2.StartCommandRequest.FromString,
                    response_serializer=mission__control__pb2.CommandResponse.SerializeToString,
            ),
            'StopSpinDrillMotor': grpc.unary_unary_rpc_method_handler(
                    servicer.StopSpinDrillMotor,
                    request_deserializer=mission__control__pb2.StartCommandRequest.FromString,
                    response_serializer=mission__control__pb2.CommandResponse.SerializeToString,
            ),
            'StartSpinPump': grpc.unary_unary_rpc_method_handler(
                    servicer.StartSpinPump,
                    request_deserializer=mission__control__pb2.StartCommandRequest.FromString,
                    response_serializer=mission__control__pb2.CommandResponse.SerializeToString,
            ),
            'StopSpinPump': grpc.unary_unary_rpc_method_handler(
                    servicer.StopSpinPump,
                    request_deserializer=mission__control__pb2.StartCommandRequest.FromString,
                    response_serializer=mission__control__pb2.CommandResponse.SerializeToString,
            ),
            'StartHeater': grpc.unary_unary_rpc_method_handler(
                    servicer.StartHeater,
                    request_deserializer=mission__control__pb2.StartCommandRequest.FromString,
                    response_serializer=mission__control__pb2.CommandResponse.SerializeToString,
            ),
            'StopHeater': grpc.unary_unary_rpc_method_handler(
                    servicer.StopHeater,
                    request_deserializer=mission__control__pb2.StartCommandRequest.FromString,
                    response_serializer=mission__control__pb2.CommandResponse.SerializeToString,
            ),
            'RigMove': grpc.unary_unary_rpc_method_handler(
                    servicer.RigMove,
                    request_deserializer=mission__control__pb2.RigMoveCommandRequest.FromString,
                    response_serializer=mission__control__pb2.CommandResponse.SerializeToString,
            ),
            'Z1Move': grpc.unary_unary_rpc_method_handler(
                    servicer.Z1Move,
                    request_deserializer=mission__control__pb2.ZMoveRequest.FromString,
                    response_serializer=mission__control__pb2.CommandResponse.SerializeToString,
            ),
            'Z2Move': grpc.unary_unary_rpc_method_handler(
                    servicer.Z2Move,
                    request_deserializer=mission__control__pb2.ZMoveRequest.FromString,
                    response_serializer=mission__control__pb2.CommandResponse.SerializeToString,
            ),
            'DrillMode': grpc.unary_unary_rpc_method_handler(
                    servicer.DrillMode,
                    request_deserializer=mission__control__pb2.DrillModeRequest.FromString,
                    response_serializer=mission__control__pb2.CommandResponse.SerializeToString,
            ),
            'DrillCalibration': grpc.unary_unary_rpc_method_handler(
                    servicer.DrillCalibration,
                    request_deserializer=mission__control__pb2.DrillCalibrationRequest.FromString,
                    response_serializer=mission__control__pb2.CommandResponse.SerializeToString,
            ),
            'DrillDescendingOff': grpc.unary_unary_rpc_method_handler(
                    servicer.DrillDescendingOff,
                    request_deserializer=mission__control__pb2.DrillDescendingOffRequest.FromString,
                    response_serializer=mission__control__pb2.CommandResponse.SerializeToString,
            ),
            'DrillDescendingDrilling': grpc.unary_unary_rpc_method_handler(
                    servicer.DrillDescendingDrilling,
                    request_deserializer=mission__control__pb2.DrillDescendingDrillingRequest.FromString,
                    response_serializer=mission__control__pb2.CommandResponse.SerializeToString,
            ),
            'EmergencyStop': grpc.unary_unary_rpc_method_handler(
                    servicer.EmergencyStop,
                    request_deserializer=mission__control__pb2.EmergencyStopRequest.FromString,
                    response_serializer=mission__control__pb2.CommandResponse.SerializeToString,
            ),
            'DrillAssemblyStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.DrillAssemblyStatus,
                    request_deserializer=mission__control__pb2.DrillAssemblyStatusRequest.FromString,
                    response_serializer=mission__control__pb2.DrillAssemblyStatusResponse.SerializeToString,
            ),
            'SetAirGap': grpc.unary_unary_rpc_method_handler(
                    servicer.SetAirGap,
                    request_deserializer=mission__control__pb2.LimitChangeRequest.FromString,
                    response_serializer=mission__control__pb2.CommandResponse.SerializeToString,
            ),
            'GetAirGap': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAirGap,
                    request_deserializer=mission__control__pb2.GetLimitRequest.FromString,
                    response_serializer=mission__control__pb2.LimitResponse.SerializeToString,
            ),
            'SetMaxZ1Travel': grpc.unary_unary_rpc_method_handler(
                    servicer.SetMaxZ1Travel,
                    request_deserializer=mission__control__pb2.LimitChangeRequest.FromString,
                    response_serializer=mission__control__pb2.CommandResponse.SerializeToString,
            ),
            'GetMaxZ1Travel': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMaxZ1Travel,
                    request_deserializer=mission__control__pb2.GetLimitRequest.FromString,
                    response_serializer=mission__control__pb2.LimitResponse.SerializeToString,
            ),
            'SetLowerCurrentLimit': grpc.unary_unary_rpc_method_handler(
                    servicer.SetLowerCurrentLimit,
                    request_deserializer=mission__control__pb2.LimitChangeRequest.FromString,
                    response_serializer=mission__control__pb2.CommandResponse.SerializeToString,
            ),
            'GetLowerCurrentLimit': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLowerCurrentLimit,
                    request_deserializer=mission__control__pb2.GetLimitRequest.FromString,
                    response_serializer=mission__control__pb2.LimitResponse.SerializeToString,
            ),
            'SetUpperCurrentLimit': grpc.unary_unary_rpc_method_handler(
                    servicer.SetUpperCurrentLimit,
                    request_deserializer=mission__control__pb2.LimitChangeRequest.FromString,
                    response_serializer=mission__control__pb2.CommandResponse.SerializeToString,
            ),
            'GetUpperCurrentLimit': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUpperCurrentLimit,
                    request_deserializer=mission__control__pb2.GetLimitRequest.FromString,
                    response_serializer=mission__control__pb2.LimitResponse.SerializeToString,
            ),
            'SetLowerWOBLimit': grpc.unary_unary_rpc_method_handler(
                    servicer.SetLowerWOBLimit,
                    request_deserializer=mission__control__pb2.LimitChangeRequest.FromString,
                    response_serializer=mission__control__pb2.CommandResponse.SerializeToString,
            ),
            'GetLowerWOBLimit': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLowerWOBLimit,
                    request_deserializer=mission__control__pb2.GetLimitRequest.FromString,
                    response_serializer=mission__control__pb2.LimitResponse.SerializeToString,
            ),
            'SetUpperWOBLimit': grpc.unary_unary_rpc_method_handler(
                    servicer.SetUpperWOBLimit,
                    request_deserializer=mission__control__pb2.LimitChangeRequest.FromString,
                    response_serializer=mission__control__pb2.CommandResponse.SerializeToString,
            ),
            'GetUpperWOBLimit': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUpperWOBLimit,
                    request_deserializer=mission__control__pb2.GetLimitRequest.FromString,
                    response_serializer=mission__control__pb2.LimitResponse.SerializeToString,
            ),
            'SetLowerRPMLimit': grpc.unary_unary_rpc_method_handler(
                    servicer.SetLowerRPMLimit,
                    request_deserializer=mission__control__pb2.LimitChangeRequest.FromString,
                    response_serializer=mission__control__pb2.CommandResponse.SerializeToString,
            ),
            'GetLowerRPMLimit': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLowerRPMLimit,
                    request_deserializer=mission__control__pb2.GetLimitRequest.FromString,
                    response_serializer=mission__control__pb2.LimitResponse.SerializeToString,
            ),
            'SetUpperRPMLimit': grpc.unary_unary_rpc_method_handler(
                    servicer.SetUpperRPMLimit,
                    request_deserializer=mission__control__pb2.LimitChangeRequest.FromString,
                    response_serializer=mission__control__pb2.CommandResponse.SerializeToString,
            ),
            'GetUpperRPMLimit': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUpperRPMLimit,
                    request_deserializer=mission__control__pb2.GetLimitRequest.FromString,
                    response_serializer=mission__control__pb2.LimitResponse.SerializeToString,
            ),
            'SetZ1ServoTorqueLimit': grpc.unary_unary_rpc_method_handler(
                    servicer.SetZ1ServoTorqueLimit,
                    request_deserializer=mission__control__pb2.LimitChangeRequest.FromString,
                    response_serializer=mission__control__pb2.CommandResponse.SerializeToString,
            ),
            'GetZ1ServoTorqueLimit': grpc.unary_unary_rpc_method_handler(
                    servicer.GetZ1ServoTorqueLimit,
                    request_deserializer=mission__control__pb2.GetLimitRequest.FromString,
                    response_serializer=mission__control__pb2.LimitResponse.SerializeToString,
            ),
            'SetZ2ServoTorqueLimit': grpc.unary_unary_rpc_method_handler(
                    servicer.SetZ2ServoTorqueLimit,
                    request_deserializer=mission__control__pb2.LimitChangeRequest.FromString,
                    response_serializer=mission__control__pb2.CommandResponse.SerializeToString,
            ),
            'GetZ2ServoTorqueLimit': grpc.unary_unary_rpc_method_handler(
                    servicer.GetZ2ServoTorqueLimit,
                    request_deserializer=mission__control__pb2.GetLimitRequest.FromString,
                    response_serializer=mission__control__pb2.LimitResponse.SerializeToString,
            ),
            'SetXServoTorqueLimit': grpc.unary_unary_rpc_method_handler(
                    servicer.SetXServoTorqueLimit,
                    request_deserializer=mission__control__pb2.LimitChangeRequest.FromString,
                    response_serializer=mission__control__pb2.CommandResponse.SerializeToString,
            ),
            'GetXServoTorqueLimit': grpc.unary_unary_rpc_method_handler(
                    servicer.GetXServoTorqueLimit,
                    request_deserializer=mission__control__pb2.GetLimitRequest.FromString,
                    response_serializer=mission__control__pb2.LimitResponse.SerializeToString,
            ),
            'SetYServoTorqueLimit': grpc.unary_unary_rpc_method_handler(
                    servicer.SetYServoTorqueLimit,
                    request_deserializer=mission__control__pb2.LimitChangeRequest.FromString,
                    response_serializer=mission__control__pb2.CommandResponse.SerializeToString,
            ),
            'GetYServoTorqueLimit': grpc.unary_unary_rpc_method_handler(
                    servicer.GetYServoTorqueLimit,
                    request_deserializer=mission__control__pb2.GetLimitRequest.FromString,
                    response_serializer=mission__control__pb2.LimitResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mission_control.MissionControl', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MissionControl(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetMajorModes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.MissionControl/GetMajorModes',
            mission__control__pb2.GetMajorModesRequest.SerializeToString,
            mission__control__pb2.MajorModesList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HeartBeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.MissionControl/HeartBeat',
            mission__control__pb2.HeartBeatRequest.SerializeToString,
            mission__control__pb2.HeartBeatReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetHoles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.MissionControl/GetHoles',
            mission__control__pb2.HoleListRequest.SerializeToString,
            mission__control__pb2.HoleList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetMode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.MissionControl/SetMode',
            mission__control__pb2.SetModeRequest.SerializeToString,
            mission__control__pb2.CommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartMissionClock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.MissionControl/StartMissionClock',
            mission__control__pb2.StartCommandRequest.SerializeToString,
            mission__control__pb2.CommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartHomeZ1(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.MissionControl/StartHomeZ1',
            mission__control__pb2.StartCommandRequest.SerializeToString,
            mission__control__pb2.CommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartHomeZ2(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.MissionControl/StartHomeZ2',
            mission__control__pb2.StartCommandRequest.SerializeToString,
            mission__control__pb2.CommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartHomeX(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.MissionControl/StartHomeX',
            mission__control__pb2.StartCommandRequest.SerializeToString,
            mission__control__pb2.CommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartHomeY(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.MissionControl/StartHomeY',
            mission__control__pb2.StartCommandRequest.SerializeToString,
            mission__control__pb2.CommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetHomeZ1(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.MissionControl/SetHomeZ1',
            mission__control__pb2.StartCommandRequest.SerializeToString,
            mission__control__pb2.CommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetHomeZ2(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.MissionControl/SetHomeZ2',
            mission__control__pb2.StartCommandRequest.SerializeToString,
            mission__control__pb2.CommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetHomeX(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.MissionControl/SetHomeX',
            mission__control__pb2.StartCommandRequest.SerializeToString,
            mission__control__pb2.CommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetHomeY(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.MissionControl/SetHomeY',
            mission__control__pb2.StartCommandRequest.SerializeToString,
            mission__control__pb2.CommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartSpinDrillMotor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.MissionControl/StartSpinDrillMotor',
            mission__control__pb2.StartCommandRequest.SerializeToString,
            mission__control__pb2.CommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopSpinDrillMotor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.MissionControl/StopSpinDrillMotor',
            mission__control__pb2.StartCommandRequest.SerializeToString,
            mission__control__pb2.CommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartSpinPump(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.MissionControl/StartSpinPump',
            mission__control__pb2.StartCommandRequest.SerializeToString,
            mission__control__pb2.CommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopSpinPump(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.MissionControl/StopSpinPump',
            mission__control__pb2.StartCommandRequest.SerializeToString,
            mission__control__pb2.CommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartHeater(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.MissionControl/StartHeater',
            mission__control__pb2.StartCommandRequest.SerializeToString,
            mission__control__pb2.CommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopHeater(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.MissionControl/StopHeater',
            mission__control__pb2.StartCommandRequest.SerializeToString,
            mission__control__pb2.CommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RigMove(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.MissionControl/RigMove',
            mission__control__pb2.RigMoveCommandRequest.SerializeToString,
            mission__control__pb2.CommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Z1Move(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.MissionControl/Z1Move',
            mission__control__pb2.ZMoveRequest.SerializeToString,
            mission__control__pb2.CommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Z2Move(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.MissionControl/Z2Move',
            mission__control__pb2.ZMoveRequest.SerializeToString,
            mission__control__pb2.CommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DrillMode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.MissionControl/DrillMode',
            mission__control__pb2.DrillModeRequest.SerializeToString,
            mission__control__pb2.CommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DrillCalibration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.MissionControl/DrillCalibration',
            mission__control__pb2.DrillCalibrationRequest.SerializeToString,
            mission__control__pb2.CommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DrillDescendingOff(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.MissionControl/DrillDescendingOff',
            mission__control__pb2.DrillDescendingOffRequest.SerializeToString,
            mission__control__pb2.CommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DrillDescendingDrilling(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.MissionControl/DrillDescendingDrilling',
            mission__control__pb2.DrillDescendingDrillingRequest.SerializeToString,
            mission__control__pb2.CommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EmergencyStop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.MissionControl/EmergencyStop',
            mission__control__pb2.EmergencyStopRequest.SerializeToString,
            mission__control__pb2.CommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DrillAssemblyStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.MissionControl/DrillAssemblyStatus',
            mission__control__pb2.DrillAssemblyStatusRequest.SerializeToString,
            mission__control__pb2.DrillAssemblyStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetAirGap(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.MissionControl/SetAirGap',
            mission__control__pb2.LimitChangeRequest.SerializeToString,
            mission__control__pb2.CommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAirGap(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.MissionControl/GetAirGap',
            mission__control__pb2.GetLimitRequest.SerializeToString,
            mission__control__pb2.LimitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetMaxZ1Travel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.MissionControl/SetMaxZ1Travel',
            mission__control__pb2.LimitChangeRequest.SerializeToString,
            mission__control__pb2.CommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMaxZ1Travel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.MissionControl/GetMaxZ1Travel',
            mission__control__pb2.GetLimitRequest.SerializeToString,
            mission__control__pb2.LimitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetLowerCurrentLimit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.MissionControl/SetLowerCurrentLimit',
            mission__control__pb2.LimitChangeRequest.SerializeToString,
            mission__control__pb2.CommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLowerCurrentLimit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.MissionControl/GetLowerCurrentLimit',
            mission__control__pb2.GetLimitRequest.SerializeToString,
            mission__control__pb2.LimitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetUpperCurrentLimit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.MissionControl/SetUpperCurrentLimit',
            mission__control__pb2.LimitChangeRequest.SerializeToString,
            mission__control__pb2.CommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUpperCurrentLimit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.MissionControl/GetUpperCurrentLimit',
            mission__control__pb2.GetLimitRequest.SerializeToString,
            mission__control__pb2.LimitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetLowerWOBLimit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.MissionControl/SetLowerWOBLimit',
            mission__control__pb2.LimitChangeRequest.SerializeToString,
            mission__control__pb2.CommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLowerWOBLimit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.MissionControl/GetLowerWOBLimit',
            mission__control__pb2.GetLimitRequest.SerializeToString,
            mission__control__pb2.LimitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetUpperWOBLimit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.MissionControl/SetUpperWOBLimit',
            mission__control__pb2.LimitChangeRequest.SerializeToString,
            mission__control__pb2.CommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUpperWOBLimit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.MissionControl/GetUpperWOBLimit',
            mission__control__pb2.GetLimitRequest.SerializeToString,
            mission__control__pb2.LimitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetLowerRPMLimit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.MissionControl/SetLowerRPMLimit',
            mission__control__pb2.LimitChangeRequest.SerializeToString,
            mission__control__pb2.CommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLowerRPMLimit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.MissionControl/GetLowerRPMLimit',
            mission__control__pb2.GetLimitRequest.SerializeToString,
            mission__control__pb2.LimitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetUpperRPMLimit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.MissionControl/SetUpperRPMLimit',
            mission__control__pb2.LimitChangeRequest.SerializeToString,
            mission__control__pb2.CommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUpperRPMLimit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.MissionControl/GetUpperRPMLimit',
            mission__control__pb2.GetLimitRequest.SerializeToString,
            mission__control__pb2.LimitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetZ1ServoTorqueLimit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.MissionControl/SetZ1ServoTorqueLimit',
            mission__control__pb2.LimitChangeRequest.SerializeToString,
            mission__control__pb2.CommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetZ1ServoTorqueLimit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.MissionControl/GetZ1ServoTorqueLimit',
            mission__control__pb2.GetLimitRequest.SerializeToString,
            mission__control__pb2.LimitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetZ2ServoTorqueLimit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.MissionControl/SetZ2ServoTorqueLimit',
            mission__control__pb2.LimitChangeRequest.SerializeToString,
            mission__control__pb2.CommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetZ2ServoTorqueLimit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.MissionControl/GetZ2ServoTorqueLimit',
            mission__control__pb2.GetLimitRequest.SerializeToString,
            mission__control__pb2.LimitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetXServoTorqueLimit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.MissionControl/SetXServoTorqueLimit',
            mission__control__pb2.LimitChangeRequest.SerializeToString,
            mission__control__pb2.CommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetXServoTorqueLimit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.MissionControl/GetXServoTorqueLimit',
            mission__control__pb2.GetLimitRequest.SerializeToString,
            mission__control__pb2.LimitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetYServoTorqueLimit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.MissionControl/SetYServoTorqueLimit',
            mission__control__pb2.LimitChangeRequest.SerializeToString,
            mission__control__pb2.CommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetYServoTorqueLimit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.MissionControl/GetYServoTorqueLimit',
            mission__control__pb2.GetLimitRequest.SerializeToString,
            mission__control__pb2.LimitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class DrillControlStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.HeartBeat = channel.unary_unary(
                '/mission_control.DrillControl/HeartBeat',
                request_serializer=mission__control__pb2.HeartBeatRequest.SerializeToString,
                response_deserializer=mission__control__pb2.HeartBeatReply.FromString,
                )
        self.DrillAssemblyStatus = channel.unary_unary(
                '/mission_control.DrillControl/DrillAssemblyStatus',
                request_serializer=mission__control__pb2.DrillAssemblyStatusRequest.SerializeToString,
                response_deserializer=mission__control__pb2.DrillAssemblyStatusResponse.FromString,
                )
        self.DrillMode = channel.unary_unary(
                '/mission_control.DrillControl/DrillMode',
                request_serializer=mission__control__pb2.DrillModeRequest.SerializeToString,
                response_deserializer=mission__control__pb2.CommandResponse.FromString,
                )
        self.EmergencyStop = channel.unary_unary(
                '/mission_control.DrillControl/EmergencyStop',
                request_serializer=mission__control__pb2.EmergencyStopRequest.SerializeToString,
                response_deserializer=mission__control__pb2.CommandResponse.FromString,
                )
        self.DrillCalibration = channel.unary_unary(
                '/mission_control.DrillControl/DrillCalibration',
                request_serializer=mission__control__pb2.DrillCalibrationRequest.SerializeToString,
                response_deserializer=mission__control__pb2.CommandResponse.FromString,
                )


class DrillControlServicer(object):
    """Missing associated documentation comment in .proto file."""

    def HeartBeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DrillAssemblyStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DrillMode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EmergencyStop(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DrillCalibration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DrillControlServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'HeartBeat': grpc.unary_unary_rpc_method_handler(
                    servicer.HeartBeat,
                    request_deserializer=mission__control__pb2.HeartBeatRequest.FromString,
                    response_serializer=mission__control__pb2.HeartBeatReply.SerializeToString,
            ),
            'DrillAssemblyStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.DrillAssemblyStatus,
                    request_deserializer=mission__control__pb2.DrillAssemblyStatusRequest.FromString,
                    response_serializer=mission__control__pb2.DrillAssemblyStatusResponse.SerializeToString,
            ),
            'DrillMode': grpc.unary_unary_rpc_method_handler(
                    servicer.DrillMode,
                    request_deserializer=mission__control__pb2.DrillModeRequest.FromString,
                    response_serializer=mission__control__pb2.CommandResponse.SerializeToString,
            ),
            'EmergencyStop': grpc.unary_unary_rpc_method_handler(
                    servicer.EmergencyStop,
                    request_deserializer=mission__control__pb2.EmergencyStopRequest.FromString,
                    response_serializer=mission__control__pb2.CommandResponse.SerializeToString,
            ),
            'DrillCalibration': grpc.unary_unary_rpc_method_handler(
                    servicer.DrillCalibration,
                    request_deserializer=mission__control__pb2.DrillCalibrationRequest.FromString,
                    response_serializer=mission__control__pb2.CommandResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mission_control.DrillControl', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DrillControl(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def HeartBeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.DrillControl/HeartBeat',
            mission__control__pb2.HeartBeatRequest.SerializeToString,
            mission__control__pb2.HeartBeatReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DrillAssemblyStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.DrillControl/DrillAssemblyStatus',
            mission__control__pb2.DrillAssemblyStatusRequest.SerializeToString,
            mission__control__pb2.DrillAssemblyStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DrillMode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.DrillControl/DrillMode',
            mission__control__pb2.DrillModeRequest.SerializeToString,
            mission__control__pb2.CommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EmergencyStop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.DrillControl/EmergencyStop',
            mission__control__pb2.EmergencyStopRequest.SerializeToString,
            mission__control__pb2.CommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DrillCalibration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mission_control.DrillControl/DrillCalibration',
            mission__control__pb2.DrillCalibrationRequest.SerializeToString,
            mission__control__pb2.CommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
